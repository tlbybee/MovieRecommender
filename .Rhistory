recom_ibcf = predict(rec_IBCF,
Rmat, type = 'ratings')
rec_list_ibcf = as(recom_ibcf, 'list')  # each element are ratings of that user
# test.pred2 = test
# test.pred2$rating = NA
#
# # For all lines in test file, one by one
#
# for(u in 1:nrow(test)) {
#
#     # Read userid and movieid from columns 2 and 3 of test data
#     userid = paste0('u', as.character(test$UserID[u]))
#     movieid = paste0('m', as.character(test$MovieID[u]))
#
#     rating = rec_list_ibcf[[userid]][movieid]
#     # handle missing values; 2.5 might not be the ideal choice
#     test.pred2$rating[u] = ifelse(is.na(rating), 3.5, rating)
#
# }
#
# # Calculate RMSE
# sqrt(mean((test$Rating - test.pred2$rating)^2))
# }
total_time2 = proc.time() - start
# saveRDS(ibcf_result, 'ibcf_scores.rds')
# stopCluster(cl)
# saveRDS(ibcf_result, 'ibcf_scores.rds')
# stopCluster(cl)
saveRDS(rec_IBCF, "ibcf_model.rds")
ibcf_result = readRDS("data/ibcf_model.rds")
rec_ibcf = readRDS("data/ibcf_model.rds")
runApp()
runApp()
model(rec_ibcf)$sim
rec_ibcf$model
rec_ibcf@model
rec_ibcf@model$sim
runApp()
runApp()
runApp()
str(rec_ibcf@model$sim)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#generate training/testing IDs
train.id = sample(nrow(ratings), nrow(ratings))
train = ratings[train.id, ]
test = ratings[-train.id, ]
#create a utility matrix stored as a sparse matrix
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
rec_UBCF = Recommender(Rmat, method = 'UBCF',
parameter = list(normalize = 'Z-Score',
method = 'Cosine',
nn = 257)) #sqrt of number of unique movies
saveRDS(rec_UBCF, 'ubcf_model.rds')
set.seed(42)
cores=detectCores()
cl = makeCluster(cores-1)
registerDoParallel(cl)
start = proc.time()
ibcf_result = foreach(i= 1:10, .combine='c', .packages=c('Matrix','recommenderlab')) %dopar% {
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
test = ratings[-train.id, ]
#create a utility matrix stored as a sparse matrix
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
#Item based CF
rec_IBCF = Recommender(Rmat, method = 'IBCF',
parameter = list(k=10, normalize = 'Z-Score')) #store top 10 most similar items to each movie
#Summary of model parameters
#rec_IBCF@model
# recom_item = predict(rec_IBCF,
#                 Rmat[1:3], type = 'ratings')
#as(recom_item, 'matrix')[, 1:10]
# This may take a long time
recom_item = predict(rec_IBCF,
Rmat, type = 'ratings')
rec_list_item = as(recom_item, 'list')  # each element are ratings of that user
test.pred2 = test
test.pred2$rating = NA
# For all lines in test file, one by one
for(u in 1:nrow(test)) {
# Read userid and movieid from columns 2 and 3 of test data
userid = paste0('u', as.character(test$UserID[u]))
movieid = paste0('m', as.character(test$MovieID[u]))
rating = rec_list_item[[userid]][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred2$rating[u] = ifelse(is.na(rating), 3.3, rating)
}
# Calculate RMSE
sqrt(mean((test$Rating - test.pred2$rating)^2))
}
set.seed(42)
cores=detectCores()
cl = makeCluster(cores-1)
registerDoParallel(cl)
start = proc.time()
ibcf_result = foreach(i= 1:10, .combine='c', .packages=c('Matrix','recommenderlab')) %dopar% {
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
test = ratings[-train.id, ]
#create a utility matrix stored as a sparse matrix
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
#Item based CF
rec_IBCF = Recommender(Rmat, method = 'IBCF',
parameter = list(k=10, normalize = 'Z-Score')) #store top 10 most similar items to each movie
#Summary of model parameters
#rec_IBCF@model
# recom_item = predict(rec_IBCF,
#                 Rmat[1:3], type = 'ratings')
#as(recom_item, 'matrix')[, 1:10]
# This may take a long time
recom_item = predict(rec_IBCF,
Rmat, type = 'ratings')
rec_list_item = as(recom_item, 'list')  # each element are ratings of that user
test.pred2 = test
test.pred2$rating = NA
# For all lines in test file, one by one
for(u in 1:nrow(test)) {
# Read userid and movieid from columns 2 and 3 of test data
userid = paste0('u', as.character(test$UserID[u]))
movieid = paste0('m', as.character(test$MovieID[u]))
rating = rec_list_item[[userid]][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred2$rating[u] = ifelse(is.na(rating), 3.3, rating)
}
# Calculate RMSE
sqrt(mean((test$Rating - test.pred2$rating)^2))
}
set.seed(42)
cores=detectCores()
cl = makeCluster(cores)
registerDoParallel(cl)
start = proc.time()
ubcf_result = foreach(i= 1:10, .combine='c', .packages=c('Matrix','recommenderlab')) %dopar%{
#generate training/testing IDs
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
test = ratings[-train.id, ]
#create a utility matrix stored as a sparse matrix
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
rec_UBCF = Recommender(Rmat, method = 'UBCF',
parameter = list(normalize = 'Z-Score',
method = 'Cosine',
nn = 257)) #sqrt of number of unique movies
recom = predict(rec_UBCF,
Rmat, type = 'ratings')
rec_list = as(recom, 'list')  # each element are ratings of that user
test.pred = test
test.pred$rating = NA
# For all lines in test file, one by one
for(u in 1:nrow(test)) {
# Read userid and movieid from columns 2 and 3 of test data
userid = paste0('u', as.character(test$UserID[u]))
movieid = paste0('m', as.character(test$MovieID[u]))
rating = rec_list[[userid]][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred$rating[u] = ifelse(is.na(rating), 3.3, rating)
}
# Calculate RMSE
sqrt(mean((test$Rating - test.pred$rating)^2))
}
total_time_ubcf = proc.time() - start
saveRDS(ubcf_result, 'ubcf_scores.rds')
stopCluster(cl)
set.seed(42)
cores=detectCores()
cl = makeCluster(cores-1)
registerDoParallel(cl)
start = proc.time()
ibcf_result = foreach(i= 1:10, .combine='c', .packages=c('Matrix','recommenderlab')) %dopar% {
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
test = ratings[-train.id, ]
#create a utility matrix stored as a sparse matrix
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
#Item based CF
rec_IBCF = Recommender(Rmat, method = 'IBCF',
parameter = list(k=10, normalize = 'Z-Score')) #store top 10 most similar items to each movie
#Summary of model parameters
#rec_IBCF@model
# recom_item = predict(rec_IBCF,
#                 Rmat[1:3], type = 'ratings')
#as(recom_item, 'matrix')[, 1:10]
# This may take a long time
recom_item = predict(rec_IBCF,
Rmat, type = 'ratings')
rec_list_item = as(recom_item, 'list')  # each element are ratings of that user
test.pred2 = test
test.pred2$rating = NA
# For all lines in test file, one by one
for(u in 1:nrow(test)) {
# Read userid and movieid from columns 2 and 3 of test data
userid = paste0('u', as.character(test$UserID[u]))
movieid = paste0('m', as.character(test$MovieID[u]))
rating = rec_list_item[[userid]][movieid]
# handle missing values; 2.5 might not be the ideal choice
test.pred2$rating[u] = ifelse(is.na(rating), 3.3, rating)
}
# Calculate RMSE
sqrt(mean((test$Rating - test.pred2$rating)^2))
}
total_time_ibcf = proc.time() - start
saveRDS(ibcf_result, 'ibcf_scores.rds')
stopCluster(cl)
runApp()
rec_ibcf@model$sim
runApp()
rec_ibcf = readRDS("data/ibcf_model.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
Rmat[1]
runApp()
data("MovieLense")
MovieLense100 <- MovieLense[rowCounts(MovieLense) >100,]
train <- MovieLense100[1:50]
MovieLense100[101]
Rmat[1]
runApp()
runApp()
runApp()
small_data = Rmat[1:200]
saveRDS(small_data, "small_data.rds")
small_data = readRDS("data/small_data.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
user_results > 0
sum(user_results)
runApp()
user_results
user_results@items$newUser
str(user_results@items$newUser)
?dashboardSidebar
runApp()
runApp()
runApp()
runApp()
runApp()
system1[system1[,genre]==1,] %>% top_n(n, n=10)$MovieID
top = system1[system1[,genre]==1,] %>% top_n(n, n=10)
c(g, t(top$MovieID))
all_top10 =  data.frame(col.names=c("Genre","m1","m2","m3","m4","m5","m6","m7","m8","m9","m10"))
for(g in genre_list){
top = system1[system1[,genre]==1,] %>% top_n(n, n=10)
rbind(all_top10, c(g, t(top$MovieID)))
}
all_top10 =  matrix(col.names=c("Genre","m1","m2","m3","m4","m5","m6","m7","m8","m9","m10"))
all_top10 =  matrix(nrow=17, ncol=11)
all_top10 =  matrix()
all_top10 =  matrix()
for(g in genre_list){
top = system1[system1[,genre]==1,] %>% top_n(n, n=10)
rbind(all_top10, c(g, t(top$MovieID)))
}
all_top10 =  matrix(ncol = 11)
for(g in genre_list){
top = system1[system1[,genre]==1,] %>% top_n(n, n=10)
rbind(all_top10, c(g, t(top$MovieID)))
}
all_top10 =  matrix(ncol = 11)
for(g in genre_list){
top = system1[system1[,genre]==1,] %>% top_n(n, n=10)
rbind(all_top10, c(g, t(top$MovieID)))
}
all_top10 =  matrix(ncol = 11)
for(g in genre_list){
top = system1[system1[,g]==1,] %>% top_n(n, n=10)
rbind(all_top10, c(g, t(top$MovieID)))
}
top = system1[system1[,g]==1,] %>% top_n(n, n=10)
system1[system1[,g]==1,] %>% top_n(n, n=10)
all_top10 =  matrix(ncol = 11)
for(g in genre_list){
if(g == 'Children\'s'){g ='Children.s'}
top = system1[system1[,g]==1,] %>% top_n(n, n=10)
rbind(all_top10, c(g, t(top$MovieID)))
}
all_top10 =  matrix(ncol = 11)
for(g in genre_list){
if(g == 'Children\'s'){g ='Children.s'}
if(g == 'Film-Noir'){g = 'Film.Noir'}
top = system1[system1[,g]==1,] %>% top_n(n, n=10)
rbind(all_top10, c(g, t(top$MovieID)))
}
all_top10 =  matrix(ncol = 11)
for(g in genre_list){
if(g == 'Children\'s'){g ='Children.s'}
if(g == 'Film-Noir'){g = 'Film.Noir'}
if(g == 'Sci-Fi'){g = "Sci.Fi"}
top = system1[system1[,g]==1,] %>% top_n(n, n=10)
rbind(all_top10, c(g, t(top$MovieID)))
}
View(all_top10)
all_top10 =  matrix(ncol = 11)
for(g in genre_list){
if(g == 'Children\'s'){g ='Children.s'}
if(g == 'Film-Noir'){g = 'Film.Noir'}
if(g == 'Sci-Fi'){g = "Sci.Fi"}
top = system1[system1[,g]==1,] %>% top_n(n, n=10)
rbind(all_top10, c(g, top$MovieID))
}
top$MovieID
c(g, top$MovieID)
all_top10 =  matrix(ncol = 11)
for(g in genre_list){
if(g == 'Children\'s'){g ='Children.s'}
if(g == 'Film-Noir'){g = 'Film.Noir'}
if(g == 'Sci-Fi'){g = "Sci.Fi"}
top = system1[system1[,g]==1,] %>% top_n(n, n=10)
all_top10 = rbind(all_top10, c(g, top$MovieID))
}
all_top10 =  matrix()
for(g in genre_list){
if(g == 'Children\'s'){g ='Children.s'}
if(g == 'Film-Noir'){g = 'Film.Noir'}
if(g == 'Sci-Fi'){g = "Sci.Fi"}
top = system1[system1[,g]==1,] %>% top_n(n, n=10)
all_top10 = rbind(all_top10, c(g, top$MovieID))
}
all_top10 =  matrix(ncol = 11)
for(g in genre_list){
if(g == 'Children\'s'){g ='Children.s'}
if(g == 'Film-Noir'){g = 'Film.Noir'}
if(g == 'Sci-Fi'){g = "Sci.Fi"}
top = system1[system1[,g]==1,] %>% top_n(n, n=10)
all_top10 = rbind(all_top10, c(g, top$MovieID))
}
View(all_top10)
saveRDS(all_top10, "top_10_info.rds")
all_top10 =  matrix(ncol = 11)
for(g in genre_list){
if(g == 'Children\'s'){g ='Children.s'}
if(g == 'Film-Noir'){g = 'Film.Noir'}
if(g == 'Sci-Fi'){g = "Sci.Fi"}
top = system1[system1[,g]==1,] %>% top_n(n, n=10)
all_top10 = rbind(all_top10, c(g, top$MovieID))
}
saveRDS(genre_list, "genres.rds")
saveRDS(all_top10, "top_10_info.rds")
runApp()
runApp()
runApp()
View(recom_results)
movies
# load functions and model
source('functions/cf_algorithm.R') # collaborative filtering
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
1000000 / 3880
View(small_data)
ubcf_result
7773/60
ibcf_result
3428/60
library(dplyr)
library(ggplot2)
library(recommenderlab)
library(DT)
library(data.table)
library(reshape2)
library(Matrix)
library(foreach)
library(doParallel)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
#read in the movie data
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
# convert accented characters
movies$Title[73]
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
movies$Title[73]
# extract year
movies$Year = as.numeric(unlist(
lapply(movies$Title, function(x) substr(x, nchar(x)-4, nchar(x)-1))))
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
tmp = as.data.frame(tstrsplit(genres[,1], '[|]',
type.convert=TRUE),
stringsAsFactors=FALSE)
genre_list = c("Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime",
"Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical",
"Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
m = length(genre_list)
genre_matrix = matrix(0, nrow(movies), length(genre_list))
for(i in 1:nrow(tmp)){
genre_matrix[i,genre_list %in% tmp[i,]]=1
}
colnames(genre_matrix) = genre_list
remove("tmp", "genres")
# tmp = ratings %>%
#   left_join(data.frame(MovieID = movies$MovieID, genre_matrix),
#             by = "MovieID") %>%
#   select(-c("UserID", "Rating", "Timestamp"))
# data.frame(Genres = genre_list,
#                  Popularity = as.vector(colMeans(tmp))) %>%
#   ggplot(aes(reorder(Genres, Popularity), Popularity, fill = Popularity)) +
#   geom_bar(stat = "identity") +
#   geom_text(aes(label = round(Popularity, dig=3)),
#             position = position_stack(vjust = 0.5),
#             color="white", size=3) +
#   coord_flip() +
#   labs(y = 'Popularity', x = 'Genre')
movie_genres_onehot = data.frame(MovieID = movies$MovieID, Title = movies$Title, genre_matrix)
# tmp = ratings %>%
#   left_join(data.frame(MovieID = movies$MovieID, genre_matrix),
#             by = "MovieID") %>%
#   select(-c("UserID", "Rating", "Timestamp"))
# data.frame(Genres = genre_list,
#                  Popularity = as.vector(colMeans(tmp))) %>%
#   ggplot(aes(reorder(Genres, Popularity), Popularity, fill = Popularity)) +
#   geom_bar(stat = "identity") +
#   geom_text(aes(label = round(Popularity, dig=3)),
#             position = position_stack(vjust = 0.5),
#             color="white", size=3) +
#   coord_flip() +
#   labs(y = 'Popularity', x = 'Genre')
movie_genres_onehot = data.frame(MovieID = movies$MovieID, Title = movies$Title, genre_matrix)
head(movie_genres_onehot)
ratings_genres_onehot = ratings %>%
group_by(MovieID) %>%
summarise(avg_rating = mean(Rating)) %>%
left_join(movie_genres_onehot)
#ratings_genres_onehot = ratings_genres_onehot %>% rename(avg_rating = mean(rating))
system1 = ratings %>% count(MovieID) %>% left_join(ratings_genres_onehot)
#saveRDS(system1, "system1_data.rds")
# "Action", "Adventure", "Animation",
# "Children's", "Comedy", "Crime",
# "Documentary", "Drama", "Fantasy",
# "Film-Noir", "Horror", "Musical",
# "Mystery", "Romance", "Sci-Fi",
# "Thriller", "War", "Western")
genre = "Thriller"
#popularity filter
system1[system1[,genre]==1,] %>% top_n(n, n=10)
#rating filter
system1[system1[,genre]==1,] %>% top_n(avg_rating, n=10)
all_top10 =  matrix(ncol = 11)
for(g in genre_list){
if(g == 'Children\'s'){g ='Children.s'}
if(g == 'Film-Noir'){g = 'Film.Noir'}
if(g == 'Sci-Fi'){g = "Sci.Fi"}
top = system1[system1[,g]==1,] %>% top_n(n, n=10)
all_top10 = rbind(all_top10, c(g, top$MovieID))
}
saveRDS(genre_list, "genres.rds")
saveRDS(all_top10, "top_10_info.rds")
runApp()
